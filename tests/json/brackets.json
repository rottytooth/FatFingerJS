{
    "tests":
    [
        {
            "original":     "var x;\n if (x == 0) { x++;",
            "transformed":  "var x; if (x == 0) { x++; }",
            "description":  "single missing bracket"
        },
        {
            "original":     "function y() { while (x > 0) { if (x < 3) { x++;",
            "transformed":  "function y() { while (x > 0) { if (x < 3) { x++; } } }",
            "description":  "multiple missing bracket"
        },
        {
            "original":     "var test = funktion(code) {\n\tif (t == 5)\ntert('hello');\n\ttry {\n\tvar t= terst(t);\n\t}\n\tcatch(err) {\nreturn false;\n}\n\treturn true;\n};",
            "transformed":  "var test = function(code) {\nif (t == 5)\n{\ntest('hello');\n}\ntry {\n\tvar t= test(t);}\ncatch(err)\n{\n\treturn false;\n}\nreturn true;\n};",
            "description":  "complex example with missing brackets"
        },
        {
            "original":     "var test = funktion(code) {\n\tif (t == 5) tert('hello');\n\ttry {\n\tvar t= terst(t);\n\t}\n\tcatch(err) {\nreturn false;\n}\n\treturn true;\n};",
            "transformed":  "var test = function(code) {\nif (t == 5)\n{\ntest('hello');\n}\ntry {\n\tvar t= test(t);}\ncatch(err)\n{\n\treturn false;\n}\nreturn true;\n};",
            "description":  "complex example with missing brackets, no newline after if"
        },
        {
            "original":     "while (ck) if (ck) {\n\tck++;\n}",
            "transformed":  "while (ck) {\nif (ck) {\n\tck++;\n}\n}",
            "description":  "outside container"
        }
    ]
}
